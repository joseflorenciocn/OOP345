Script started on Fri 20 Apr 2018 10:45:17 PM EDT
jcoelho-neto@matrix:~/OOP345/w8> whoami
jcoelho-neto
jcoelho-neto@matrix:~/OOP345/w8> cat el[K[KElement.h 
// Workshop 9 - Smart Pointers
// Element.h

#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>

extern const int FWC;
extern const int FWD;
extern const int FWP;

namespace w9 {

	struct Description {
		unsigned code;
		std::string desc;
		bool load(std::ifstream& f) {
			f >> code >> desc;
			return f.good();
		}
		void display(std::ostream& os) const {
			os << std::setw(FWC) << code << std::setw(FWD)
				<< desc << std::endl;
		}
	};

	struct Price {
		unsigned code;
		double price;
		bool load(std::ifstream& f) {
			f >> code >> price;
			return f.good();
		}
		void display(std::ostream& os) const {
			os << std::setw(FWC) << code << std::setw(FWP)
				<< price << std::endl;
		}
	};

	struct Product {
		std::string desc;
		double price;
		Product() {}
		Product(const std::string& str, double p) : desc(str), price(p) {}
		void display(std::ostream& os) const {
			os << std::setw(FWD) << desc << std::setw(FWP)
				<< price << std::endl;
		}

		void validate()
		{

			if(price < 0) throw "*** Negative prices are invalid ***";

		}
	};
}
jcoelho-neto@matrix:~/OOP345/w8> cat List.h 
// Workshop 9 - Smart Pointers
// List.h

#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <fstream>

namespace w9 {
	template <typename T>
	class List {
		std::vector<T> list;
	public:
		List() { }
		List(const char* fn) {
			std::ifstream file(fn);
			if (!file)
				throw std::string("*** Failed to open file ") +
				std::string(fn) + std::string(" ***");
			while (file) {
				T e;
				if (e.load(file))
					list.push_back(*new T(e));
			}
		}
		size_t size() const { return list.size(); }
		const T& operator[](size_t i) const { return list[i]; }
		void operator+=(T* p) {
			list.push_back(*p);
		}
		void display(std::ostream& os) const {
			os << std::fixed << std::setprecision(2);
			for (auto& e : list)
				e.display(os);
		}
		void operator+=(std::shared_ptr<T> pointer) 
		{
			list.push_back(*pointer);
		}

	};

	template<typename T>
	std::ostream& operator<<(std::ostream& os, const List<T>& l) {
		l.display(os);
		return os;
	}
}
jcoelho-neto@matrix:~/OOP345/w8> cat main.cpp 
// Workshop 9 - Smart Pointers
// w9.cpp

#include <iostream>
#include <iomanip>
#include <memory>
#include "Element.h"
#include "List.h"

const int FWC = 5;
const int FWD = 12;
const int FWP = 8;

//using namespace w9;

w9::List<w9::Product> merge(const w9::List<w9::Description>& desc,
	const w9::List<w9::Price>& price) {
	w9::List<w9::Product> priceList;

	// complete this part
	for (auto i = 0; i < price.size(); i++)
	{
		for (auto j = 0; j < desc.size(); j++)
		{
			if (desc[j].code == price[i].code)
			{
				std::unique_ptr<w9::Product> uptr(new w9::Product(desc[j].desc, price[i].price));
				(*uptr).validate();
				priceList += std::move(uptr);

			}
		}
	}





	return priceList;
}

int main(int argc, char** argv) {
	std::cout << "\nCommand Line : ";
	for (int i = 0; i < argc; i++) {
		std::cout << argv[i] << ' ';
	}
	std::cout << std::endl;
	if (argc != 3) {
		std::cerr << "\n***Incorrect number of arguments***\n";
		return 1;
	}

	try {
		w9::List<w9::Description> desc(argv[1]);
		std::cout << std::endl;
		std::cout << std::setw(FWC) << "Code" <<
			std::setw(FWD) << "Description" << std::endl;
		std::cout << desc << std::endl;
		w9::List<w9::Price> price(argv[2]);
		std::cout << std::endl;
		std::cout << std::setw(FWC) << "Code" <<
			std::setw(FWP) << "Price" << std::endl;
		std::cout << price << std::endl;
		w9::List<w9::Product> priceList = merge(desc, price);
		std::cout << std::endl;
		std::cout << std::setw(FWD) << "Description" <<
			std::setw(FWP) << "Price" << std::endl;
		std::cout << priceList << std::endl;
	}
	catch (const std::string& msg) {
		std::cerr << msg << std::endl;
	}
	catch (const char* msg) {
		std::cerr << msg << std::endl;
	}

	std::cout << "\nPress any key to continue ... ";
	std::cin.get();
}jcoelho-neto@matrix:~/OOP345/w8> w8 [10@cat main.cpp[C[2PList.h[C[3@Elemen[C[C[C[C[8Pwhoami[2Pexitw7 grade.txt pg++ -std=c++0x -o w7 main.cpp 0[C[C[C[C[C[C[C[C[C[C[C[C[C[17Pcat[C[C[C[C[C[C[C[C[C[C[17@g++ -std=c++0x -0 w7[C[C[C[C[C[C[C[C[C[Co[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@8[1P[C[C[C[C[C[C[C[C[C[C
jcoelho-neto@matrix:~/OOP345/w8> w8 Description.txt ba[K[KBadprices.txt 

Command Line : w8 Description.txt Badprices.txt 

 Code Description
 4662    tomatoes
 4039   cucumbers
 4056    brocolli
 4067      lemons
 4068     oranges


 Code   Price
 4067    0.99
 4068    0.67
 4039    1.99
 4056   -2.49

*** Negative prices are invalid ***

Press any key to continue ... 
jcoelho-neto@matrix:~/OOP345/w8> exit
exit

Script done on Fri 20 Apr 2018 10:46:51 PM EDT
